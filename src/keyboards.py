from telethon.tl.types import *
from telethon.tl.custom import *
from src.users import *


async def change_categories(prev_id=-1):
    buttons = []
    for button_val in buttons_get_all(prev_id):
        buttons.append([Button.inline(button_val["value"], f"changeMenu={button_val['id']}")])
        buttons[-1].append(Button.inline('üóë', f"deleteButton={button_val['id']}"))

    buttons.append([Button.inline('‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å', 'addHere')])
    if prev_id != -1:
        parentId = buttons_get(id=prev_id)['prev_id']
        buttons.append([Button.inline('–ù–∞–∑–∞–¥‚èèÔ∏èÔ∏è', f'changeMenu={parentId}')])
    else:
        buttons.append([Button.inline('–ó–∞–≤–µ—Ä—à–∏—Ç—å', 'settings')])
    return buttons


async def change_final(prev_id):
    buttons = []
    k = 0
    for button_val in buttons_get_all(prev_id):
        template = Button.inline(f'üóë {button_val["value"]}', f"deleteButton={button_val['id']}")
        if not k:
            buttons.append([template])
        else:
            buttons[-1].append(template)
        k = (k + 1) % 2
    buttons.append([Button.inline('‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å', 'addHere')])
    buttons[-1].append(Button.inline('–ó–∞–≤–µ—Ä—à–∏—Ç—å', 'settings'))
    return buttons


async def link_choice(prevId=-1):
    buttons = []
    k = 0
    for button_val in buttons_get_all(prevId):
        if button_val['next_count'] == 0 and button_val['value'].count('|'):
            name, currentLink = button_val['value'].split('|')
            template = Button.url(name, currentLink)
        else:
            template = Button.inline(button_val['value'], f'link={button_val["id"]}')

        if not k:
            buttons.append([template])
        else:
            buttons[-1].append(template)
        k = (k + 1) % 2

    if prevId != -1:
        parentId = buttons_get(id=prevId)['prev_id']
        buttons.append([Button.inline('–ù–∞–∑–∞–¥‚èèÔ∏è', f'link={parentId}')])
    else:
        buttons.append([Button.inline('–°–∫—Ä—ã—Ç—å', 'stop')])
    return buttons


async def form_education():
    buttons = [
        [
            Button.inline('–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç', 'get=0'),
            Button.inline('–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç', 'get=1'),
        ],
        [
            Button.inline('–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞', 'get=2'),
            Button.inline('–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞', 'get=3'),
        ],
        [
            Button.inline('–°–∫—Ä—ã—Ç—å', 'stop'),
        ],
    ]
    return buttons


async def course_number(formId):
    buttons = [
        [
            Button.inline('1 –∫—É—Ä—Å', f'get={formId}=1'),
            Button.inline('2 –∫—É—Ä—Å', f'get={formId}=2'),
            Button.inline('3 –∫—É—Ä—Å', f'get={formId}=3'),
        ],
        [
            Button.inline('4 –∫—É—Ä—Å', f'get={formId}=4'),
            Button.inline('5 –∫—É—Ä—Å', f'get={formId}=5'),
            Button.inline('6 –∫—É—Ä—Å', f'get={formId}=6'),
        ],
        [
            Button.inline('–ù–∞–∑–∞–¥‚èèÔ∏è', 'get')
        ]
    ]
    return buttons


async def group_choice(formId, courceNumber):
    buttons = []
    tmp = parser_get_urls(formId)
    k = 0
    print(tmp)
    if courceNumber in tmp:
        for group in tmp[courceNumber]:
            template = Button.inline(group['name'], f'get={formId}={courceNumber}={group["href"]}')
            if not k:
                buttons.append([template])
            else:
                buttons[-1].append(template)
            k = (k + 1) % 4
    buttons.append([Button.inline('–ù–∞–∑–∞–¥‚èèÔ∏è', f'get={formId}')])
    return buttons


async def mode_choice(formId, courceNumber, scheduleId):
    buttons = [
        [
            Button.inline('–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å', f'get={formId}={courceNumber}={scheduleId}=0'),
            Button.inline('–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è', f'get={formId}={courceNumber}={scheduleId}=1'),
        ],
        [
            Button.inline('–í—Å–µ –Ω–µ–¥–µ–ª–∏', f'get={formId}={courceNumber}={scheduleId}=2'),
            Button.inline('–°–µ—Å—Å–∏—è', f'get={formId}={courceNumber}={scheduleId}=3'),
        ],
        [
            Button.inline('–£—Å—Ç–Ω–∞–Ω–æ–≤–∏—Ç—å –ø–æ—É–º–æ–ª—á–∞–Ω–∏—é', f'setDefault={formId}={courceNumber}={scheduleId}'),
            Button.inline('–°–∫—Ä—ã—Ç—å', 'stop'),
        ],
        [
            Button.inline('–ù–∞–∑–∞–¥‚èèÔ∏è', f'get={formId}={courceNumber}'),
        ],
    ]
    return buttons


async def judge_buttons(userId, likes, dislikes):
    return [
        Button.inline(f'üëç {likes}', f'like={userId}={likes}={dislikes}=1'),
        Button.inline(f'üëé {dislikes}', f'like={userId}={likes}={dislikes}=0')
    ]


main_keyboard = [
    [
        Button.text('üìÑ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã', resize=True),
        Button.text('üóì–û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', resize=True),
    ],
    [
        Button.text('üîó–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏', resize=True),
        Button.text('üõ†–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π', resize=True),
    ]
]

controller_keyboard = [

]

admin_keyboard = [
    [
        Button.text('üîà–í–µ—â–∞—Ç—å', resize=True),
        Button.text('‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', resize=True),
    ]
]

settings_buttons = [
    [Button.inline('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Å—ã–ª–∫–∏', 'changeMenu=-1')],
    [Button.inline('–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ', 'changeRole=0')],
    [Button.inline('–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'changeRole=1')],
    [Button.inline('–ó–∞–≤–µ—Ä—à–∏—Ç—å', 'stop')],
]
